name: Deploy to Firebase

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  deploy:
    name: Deploy to Firebase
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    concurrency:
      group: deploy-${{ github.event.inputs.environment || 'production' }}
      cancel-in-progress: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test

      - name: Build application
        run: pnpm build
        env:
          NEXT_PUBLIC_MAPBOX_TOKEN: ${{ secrets.NEXT_PUBLIC_MAPBOX_TOKEN }}
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          UPLOAD_MAX_MB: 500
          PUBLIC_SITE_URL: ${{ secrets.PUBLIC_SITE_URL }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Build Firebase Functions
        working-directory: ./functions
        run: |
          npm install
          npm run build

      - name: Deploy to Firebase
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
            firebase use staging --token "${{ secrets.FIREBASE_TOKEN }}"
          else
            firebase use production --token "${{ secrets.FIREBASE_TOKEN }}"
          fi
          
          firebase deploy --token "${{ secrets.FIREBASE_TOKEN }}" --non-interactive
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Update Firestore Security Rules
        run: |
          firebase deploy --only firestore:rules --token "${{ secrets.FIREBASE_TOKEN }}" --non-interactive

      - name: Update Storage Security Rules  
        run: |
          firebase deploy --only storage --token "${{ secrets.FIREBASE_TOKEN }}" --non-interactive

      - name: Deploy Indexes
        run: |
          firebase deploy --only firestore:indexes --token "${{ secrets.FIREBASE_TOKEN }}" --non-interactive

      - name: Post-deployment health check
        run: |
          sleep 30
          if [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
            curl -f "${{ secrets.STAGING_SITE_URL }}/api/health" || exit 1
          else
            curl -f "${{ secrets.PRODUCTION_SITE_URL }}/api/health" || exit 1
          fi

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment successful to ${{ github.event.inputs.environment || 'production' }}"
          
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment failed to ${{ github.event.inputs.environment || 'production' }}"

  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          urls: |
            ${{ secrets.PRODUCTION_SITE_URL }}
            ${{ secrets.PRODUCTION_SITE_URL }}/app/drops
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
