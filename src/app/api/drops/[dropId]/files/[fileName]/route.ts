import { NextRequest, NextResponse } from 'next/server'
import { uploadedFilesStore } from '@/lib/demo-storage'

// Demo file contents for different file types
const demoFiles: Record<string, { content: string; mimeType: string; isBase64?: boolean }> = {
  // Test Drop 1 Files
  'treasure-map.pdf': {
    content: `%PDF-1.4
1 0 obj
<< /Type /Catalog /Pages 2 0 R >>
endobj
2 0 obj
<< /Type /Pages /Kids [3 0 R] /Count 1 >>
endobj
3 0 obj
<< /Type /Page /Parent 2 0 R /MediaBox [0 0 612 792] /Contents 4 0 R /Resources << /Font << /F1 5 0 R >> >> >>
endobj
4 0 obj
<< /Length 200 >>
stream
BT
/F1 24 Tf
100 700 Td
(üó∫Ô∏è TREASURE MAP) Tj
0 -50 Td
/F1 16 Tf
(Congratulations! You found the treasure!) Tj
0 -30 Td
(Location: London Demo Drop) Tj
0 -30 Td
(Secret: test123) Tj
0 -30 Td
(This is a demo PDF generated by Trove) Tj
0 -50 Td
(Visit: trove-demo.vercel.app) Tj
ET
endstream
endobj
5 0 obj
<< /Type /Font /Subtype /Type1 /BaseFont /Helvetica >>
endobj
xref
0 6
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000274 00000 n 
0000000526 00000 n 
trailer
<< /Size 6 /Root 1 0 R >>
startxref
565
%%EOF`,
    mimeType: 'application/pdf'
  },
  'secret-note.txt': {
    content: `üéâ CONGRATULATIONS! üéâ

You successfully unearthed your first Trove!

üìç Location: London Demo Drop (51.5074, -0.1278)
üîê Secret Phrase: "test123"
üìÖ Found: ${new Date().toLocaleDateString()}

üè¥‚Äç‚ò†Ô∏è TREASURE HUNTER NOTES:
- This demonstrates Trove's geo-anchored file sharing
- Files are securely tied to physical locations
- Perfect for field work, construction sites, and more

üíº BUSINESS APPLICATIONS:
‚Ä¢ Construction: Site-specific documents and reports
‚Ä¢ Real Estate: Property-tied documentation
‚Ä¢ Emergency Services: Location-based resource access
‚Ä¢ Field Research: Geo-tagged data collection

üöÄ Try creating your own drops!

Welcome to the future of location-based file sharing.

---
Generated by Trove Demo
Visit: https://trove-demo.vercel.app`,
    mimeType: 'text/plain'
  },
  
  // Test Drop 2 Files  
  'premium-content.zip': {
    content: 'UEsDBAoAAAAAAIdYE1cAAAAAAAAAAAAAAAAJAAAAcHJlbWl1bS8KUEsDBBQAAAAIAIdYE1fxQw0AZwAAAHcAAAATAAAAcHJlbWl1bS9yZWFkbWUudHh0jVBBCsIwELzzij1L2ybNwVuLePCgJ8WDiJI0azemSUhS/7+pWqoHL3Ng2NmdHRZjjWkdJxoVGgYkRVHgEawZjEYqyNdNhJSCBNk2P5A8P4kNSNRGGmPQDGMjJY4gHrATVAEJY4pRcKaQVpCXR+qzA6vZnGftQp7M8YRF8/6Xrr6bvPsAPEqDMbGsGg==',
    mimeType: 'application/zip',
    isBase64: true
  },
  
  // Test Drop 3 Files (Dave Sharp)
  'dave-sharp-documents.pdf': {
    content: `%PDF-1.4
1 0 obj
<< /Type /Catalog /Pages 2 0 R >>
endobj
2 0 obj
<< /Type /Pages /Kids [3 0 R] /Count 1 >>
endobj
3 0 obj
<< /Type /Page /Parent 2 0 R /MediaBox [0 0 612 792] /Contents 4 0 R /Resources << /Font << /F1 5 0 R >> >> >>
endobj
4 0 obj
<< /Length 280 >>
stream
BT
/F1 20 Tf
100 700 Td
(üìã FILES FOR DAVE SHARP) Tj
0 -40 Td
/F1 14 Tf
(Location: North England Demo Drop) Tj
0 -25 Td
(Coordinates: 54.575663, -1.229192) Tj
0 -25 Td
(Secret Phrase: "Fake Believe") Tj
0 -40 Td
/F1 16 Tf
(üìÅ DEMO PROJECT DOCUMENTS) Tj
0 -30 Td
/F1 12 Tf
(‚Ä¢ Project specifications and requirements) Tj
0 -20 Td
(‚Ä¢ Meeting notes and action items) Tj
0 -20 Td
(‚Ä¢ Technical documentation) Tj
0 -20 Td
(‚Ä¢ Audio recordings from team calls) Tj
0 -40 Td
/F1 10 Tf
(Generated by Trove - Location-Based File Sharing) Tj
ET
endstream
endobj
5 0 obj
<< /Type /Font /Subtype /Type1 /BaseFont /Helvetica >>
endobj
xref
0 6
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000274 00000 n 
0000000556 00000 n 
trailer
<< /Size 6 /Root 1 0 R >>
startxref
595
%%EOF`,
    mimeType: 'application/pdf'
  },
  'project-notes.docx': {
    content: `üìù PROJECT NOTES - DAVE SHARP

üéØ DEMO CONTENT FOR TROVE INVESTOR PRESENTATION

Date: ${new Date().toLocaleDateString()}
Location: North England Drop (54.575663, -1.229192)
Secret: "Fake Believe"

üìã PROJECT OVERVIEW:
This document demonstrates Trove's ability to anchor files to specific geographic locations, creating a new paradigm for location-based file sharing.

üîß TECHNICAL FEATURES DEMONSTRATED:
‚Ä¢ Geospatial file anchoring with precise coordinates
‚Ä¢ Secret phrase authentication for secure access
‚Ä¢ Multi-file drop support (PDF, DOCX, MP3)
‚Ä¢ Real-time geofence validation
‚Ä¢ Professional web interface with mobile support

üíº BUSINESS APPLICATIONS:
‚Ä¢ Construction sites: Store blueprints, safety docs, inspection reports
‚Ä¢ Real estate: Property-specific documentation and media
‚Ä¢ Field research: Location-tied data collection and analysis
‚Ä¢ Emergency services: Critical information at specific coordinates
‚Ä¢ Event management: Venue-specific resources and schedules

üöÄ INVESTMENT OPPORTUNITY:
Trove represents the next evolution in file sharing - moving beyond generic cloud storage to location-intelligent document management.

üìä MARKET POTENTIAL:
‚Ä¢ $X billion addressable market in enterprise file sharing
‚Ä¢ Growing demand for location-based business solutions
‚Ä¢ Clear freemium to enterprise monetization path

---
This file was generated by Trove's demo system.
Actual implementation would support full Microsoft Office document creation and editing.

Contact: demo@trove-app.com
Website: https://trove-demo.vercel.app`,
    mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
  },
  'meeting-recording.mp3': {
    content: `üéµ DEMO AUDIO FILE - MEETING RECORDING

üéôÔ∏è This would be an actual MP3 audio file in production.

For the demo, this represents:
‚Ä¢ Team meeting recordings
‚Ä¢ Voice notes and field reports  
‚Ä¢ Location-specific audio content
‚Ä¢ Interview recordings tied to specific places

üìç Recorded at: North England Demo Location
üîê Access Code: "Fake Believe"
üìÖ Date: ${new Date().toISOString()}

In a real implementation, this would be a proper audio file that could be played in the browser or downloaded for offline listening.

üèóÔ∏è BUSINESS USE CASES:
‚Ä¢ Construction site safety briefings
‚Ä¢ Property tour voice-overs
‚Ä¢ Field research audio logs
‚Ä¢ Emergency response communications

Trove makes it easy to associate rich media content with specific geographic locations, enabling new workflows for location-based teams.

---
Generated by Trove Demo System
https://trove-demo.vercel.app`,
    mimeType: 'audio/mpeg'
  }
}

export async function GET(
  request: NextRequest,
  { params }: { params: { dropId: string; fileName: string } }
) {
  try {
    const { dropId, fileName } = params
    
    console.log(`File download request: ${dropId}/${fileName}`)
    
    // First check if this is an uploaded file (user-created drops)
    const uploadedFileKey = Object.keys(uploadedFilesStore).find(key => {
      const file = uploadedFilesStore[key]
      return file.name === fileName && key.startsWith(dropId)
    })
    
    if (uploadedFileKey) {
      const uploadedFile = uploadedFilesStore[uploadedFileKey]
      console.log(`Serving uploaded file: ${fileName} (${uploadedFile.content.length} bytes)`)
      
      const headers = new Headers()
      headers.set('Content-Type', uploadedFile.type)
      headers.set('Content-Disposition', `attachment; filename="${fileName}"`)
      headers.set('Content-Length', uploadedFile.content.length.toString())
      headers.set('Cache-Control', 'no-cache')
      
      return new NextResponse(new Uint8Array(uploadedFile.content), {
        status: 200,
        headers
      })
    }
    
    // Fall back to demo files for test drops
    const fileInfo = demoFiles[fileName]
    if (!fileInfo) {
      return NextResponse.json(
        { error: 'File not found' },
        { status: 404 }
      )
    }
    
    // Prepare demo file content
    let content: Buffer
    if (fileInfo.isBase64) {
      content = Buffer.from(fileInfo.content, 'base64')
    } else {
      content = Buffer.from(fileInfo.content, 'utf-8')
    }
    
    // Set appropriate headers for file download
    const headers = new Headers()
    headers.set('Content-Type', fileInfo.mimeType)
    headers.set('Content-Disposition', `attachment; filename="${fileName}"`)
    headers.set('Content-Length', content.length.toString())
    headers.set('Cache-Control', 'no-cache')
    
    // Log successful download
    console.log(`Serving demo file: ${fileName} (${content.length} bytes, ${fileInfo.mimeType})`)
    
    return new NextResponse(new Uint8Array(content), {
      status: 200,
      headers
    })
    
  } catch (error) {
    console.error('Error serving file:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}