import { describe, it, expect } from 'vitest'\nimport {\n  calculateDistance,\n  generateGeohash,\n  createCoordinates,\n  isWithinGeofence,\n  getCompassDirection,\n  formatDistance,\n} from '@/lib/geo'\n\ndescribe('geo utilities', () => {\n  describe('calculateDistance', () => {\n    it('should calculate distance between two points correctly', () => {\n      // Distance between London and Paris (approximately 344 km)\n      const london = { lat: 51.5074, lng: -0.1278 }\n      const paris = { lat: 48.8566, lng: 2.3522 }\n      \n      const distance = calculateDistance(london.lat, london.lng, paris.lat, paris.lng)\n      \n      // Should be approximately 344,000 meters\n      expect(distance).toBeGreaterThan(340000)\n      expect(distance).toBeLessThan(350000)\n    })\n    \n    it('should return 0 for same coordinates', () => {\n      const distance = calculateDistance(51.5074, -0.1278, 51.5074, -0.1278)\n      expect(distance).toBe(0)\n    })\n    \n    it('should handle small distances accurately', () => {\n      // Two points very close together (about 100m apart)\n      const lat1 = 51.5074\n      const lng1 = -0.1278\n      const lat2 = 51.5084 // About 0.001 degrees north\n      const lng2 = -0.1278\n      \n      const distance = calculateDistance(lat1, lng1, lat2, lng2)\n      \n      // Should be approximately 111 meters (rough conversion)\n      expect(distance).toBeGreaterThan(100)\n      expect(distance).toBeLessThan(130)\n    })\n  })\n  \n  describe('generateGeohash', () => {\n    it('should generate geohash of correct length', () => {\n      const geohash = generateGeohash(51.5074, -0.1278, 9)\n      expect(geohash).toHaveLength(9)\n    })\n    \n    it('should generate consistent geohashes for same coordinates', () => {\n      const geohash1 = generateGeohash(51.5074, -0.1278, 9)\n      const geohash2 = generateGeohash(51.5074, -0.1278, 9)\n      expect(geohash1).toBe(geohash2)\n    })\n    \n    it('should generate different geohashes for different coordinates', () => {\n      const geohash1 = generateGeohash(51.5074, -0.1278, 9)\n      const geohash2 = generateGeohash(48.8566, 2.3522, 9)\n      expect(geohash1).not.toBe(geohash2)\n    })\n  })\n  \n  describe('createCoordinates', () => {\n    it('should create coordinates object with geohash', () => {\n      const coords = createCoordinates(51.5074, -0.1278)\n      \n      expect(coords).toHaveProperty('lat', 51.5074)\n      expect(coords).toHaveProperty('lng', -0.1278)\n      expect(coords).toHaveProperty('geohash')\n      expect(typeof coords.geohash).toBe('string')\n      expect(coords.geohash.length).toBeGreaterThan(0)\n    })\n  })\n  \n  describe('isWithinGeofence', () => {\n    it('should return true when within radius', () => {\n      const center = { lat: 51.5074, lng: -0.1278 }\n      const userLocation = { lat: 51.5075, lng: -0.1279 } // Very close\n      const radius = 100 // 100 meters\n      \n      const result = isWithinGeofence(userLocation, center, radius)\n      \n      expect(result.withinFence).toBe(true)\n      expect(result.distance).toBeLessThan(radius)\n    })\n    \n    it('should return false when outside radius', () => {\n      const center = { lat: 51.5074, lng: -0.1278 }\n      const userLocation = { lat: 51.5174, lng: -0.1278 } // About 1km north\n      const radius = 100 // 100 meters\n      \n      const result = isWithinGeofence(userLocation, center, radius)\n      \n      expect(result.withinFence).toBe(false)\n      expect(result.distance).toBeGreaterThan(radius)\n    })\n    \n    it('should return exact distance', () => {\n      const center = { lat: 51.5074, lng: -0.1278 }\n      const userLocation = { lat: 51.5074, lng: -0.1278 } // Same location\n      const radius = 100\n      \n      const result = isWithinGeofence(userLocation, center, radius)\n      \n      expect(result.withinFence).toBe(true)\n      expect(result.distance).toBe(0)\n    })\n  })\n  \n  describe('getCompassDirection', () => {\n    it('should return correct compass directions', () => {\n      const center = { lat: 51.5074, lng: -0.1278 }\n      \n      // North\n      const north = getCompassDirection(center.lat, center.lng, center.lat + 0.01, center.lng)\n      expect(north).toBe('N')\n      \n      // South\n      const south = getCompassDirection(center.lat, center.lng, center.lat - 0.01, center.lng)\n      expect(south).toBe('S')\n      \n      // East\n      const east = getCompassDirection(center.lat, center.lng, center.lat, center.lng + 0.01)\n      expect(east).toBe('E')\n      \n      // West\n      const west = getCompassDirection(center.lat, center.lng, center.lat, center.lng - 0.01)\n      expect(west).toBe('W')\n    })\n  })\n  \n  describe('formatDistance', () => {\n    it('should format meters correctly', () => {\n      expect(formatDistance(50)).toBe('50m')\n      expect(formatDistance(999)).toBe('999m')\n    })\n    \n    it('should format kilometers correctly', () => {\n      expect(formatDistance(1000)).toBe('1.0km')\n      expect(formatDistance(1500)).toBe('1.5km')\n      expect(formatDistance(2000)).toBe('2.0km')\n    })\n    \n    it('should handle large distances', () => {\n      expect(formatDistance(344000)).toBe('344.0km')\n    })\n  })\n})\n